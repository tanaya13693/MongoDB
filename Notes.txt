MongoDB University M001 Lectures:

---------------------------------------------------------------------------------------------------------------------
Chapter 1: Introduction

MongoDB Clusters are running on MongoDB Atlas(Hosted MongoDB as a service platform). It s runnig on Amazon AWS.
MongoDB Compass: GUI client to access MongoDB clusters.

Database has collections and collection has documents.
E.g. city.neighbourhod.doc1 = database.collection.document

*Documents: Scalar Value Types
For documents in collection, MongoDB Compass can show 'schema' that can give better sense of data types, range of values, etc.
Data Types: int32, string, double, date


*MongoDB Documents: Fields with documents as values
document can have a field with documents and so on. i.e. nested documents as the fields.

In MOngoDB, data models are flexible. Not all documents can have same fields. We can add supplimentary datain the form of arrays with values. 

Object and document terms are used interchangeably. 

A document/Object can have geosacial data such as combination of an array and other document. Compass used 3rd party plugin for geographical visualization of geosatial fields in your document. 

MongoDB Filtering:
1. Quality filter: {"tripduration": "600"}  //for exact match
2. Range filter:{"tripduration": {"$gte":600, "$lt":1200}}  //for match between range of values

----------------------------------------------------------------------------------------------------------------

Chapter 2: MongoDB Query Language(CRUD) + Atlas

Mongo Shell: Used for MongoDB Query Language

Download and install MongoDB Enterprise Server. Set environment variable to the bin folder.

Command to verify the installation: >mongo --nodb
To escape command prompt: >quit()

*Important Commands*
1. Connecting to MongoDB Atlas Cluster and connect to 'test' database:
>mongo "mongodb://cluster0-shard-00-00-jxeqq.mongodb.net:27017,cluster0-shard-00-01-jxeqq.mongodb.net:27017,cluster0-shard-00-02-jxeqq.mongodb.net:27017/test?replicaSet=Cluster0-shard-0" --authenticationDatabase admin --ssl --username m001-student --password m001-mongodb-basics
2. 
  i. List all databses
      >show dbs
 ii. switch to video database:
      >use video
3. Show Collections:
>show collections
4. Show movies(documents):
db.movies.find().pretty()

Create new Atlas Cluster: https://cloud.mongodb.com/links/registerForAtlas
IP Whitelisting - to allow access from anywhere
Note: IP Whitelisting should be present for security reasons.
Create a user in MongoDB cluster for DB access
u m001-student, p m001-mongodb-basics

*Load Data into Sandbox Cluster*
1. Navigate to the directory where loadMovieDetailsDataset.js file(the one that has datasets in it) is stored. 
2. Connect to Atlas cluster
3. MongoDB Enterprise Cluster0-shard-0:PRIMARY> load("loadMovieDetailsDataset.js")
4. Run commands to view data 

*Connect compass with Atlas Sandbox Cluster*
1. Get hostname from Atlas Cluster
2. Connect to MongoDB compass


*Insert a document into a collection in a database*
Method 1: Inserting through Mongo Shell
MongoDB Enterprise Cluster0-shard-0:PRIMARY> db.moviesScratch.insertOne({title:"
Star Trek", year: 1991, imdb:"tt123678"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5dc86e238e693e84ea85a0e2")
}

Method 2: Use Compass GUI

*Insert many document*
Refer and load file "insertMany-ordered.js"

*Readingdocument/filterig syntax*
1. MongoDB Enterprise Cluster-0-shard-0:PRIMARY> db.movies.find("type":"movie").pretty()
2. MongoDB Enterprise Cluster-0-shard-0:PRIMARY> db.movies.find("wind.type":"C").pretty()
3. MongoDB Enterprise Cluster-0-shard-0:PRIMARY> db.movies.find("wind.direction.angle":10).pretty()
4. MongoDB Enterprise Cluster-0-shard-0:PRIMARY> db.movies.find("wind.direction.angle":10).pretty().count()
5. Reading from an array: 
    a. > db.movies.find({"cast.0": "Jeff Bridges"}).pretty()
    b. > db.movies.find({"cast": ["Jeff Bridges","ABCD"]}).pretty()
Note: Quotes are required abound keysin Mongo Shellbut not in Compass


*Cursors*
MongoShell is a client.
Cursor is pointer to the dataset.
Server return a batch of first 20 documents(e.g.) to client when requested.
Using cursor we can navigate over documents.

*Projections*
Projection can allow/limit result to be displayed when queried.
Syntax > db.movies.find({genre:"Action, Adventure"}, {title: 1, _id: 0})
Description: filter documents by genre. When displaying result set, show only title and not id.


*Updaing documents*
Use updateOne()/updateMany() function

*Upserts*
Add this field to updateOne() function. Set is as true. This will check first if the document exists already or not. If yes, it will udate the document else it will insert the document.

* Delete operations *
1. deleteOne()
2. deleteMany()



























